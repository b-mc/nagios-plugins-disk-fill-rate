#!/bin/bash

# set -x

debug()
{
    printf "%s\n" "$@" >> /tmp/dfr-debug.txt
}

crit_quit()
{
    printf "%s\n" "$@"
    debug "$@"
    exit 2
}

debug "===========================================
Run on $(date +"%Y-%m-%d %H:%M:%S")
==========================================="

# TODO get these from options
warning_seconds=$((3600 * 48))
critical_seconds=$((3600 * 16))

critical=0
warning=0
message="fill rate: "
offset_file="/var/run/dfr-offset"
state_file="/var/run/dfr-state"

if ! [ -r $offset_file ] || ! [ -r $state_file ]; then
  crit_quit "One or more required input files doesn't exist!"
fi

# Store the tail for multiple passes with the same data set (in case the files change under our feet)
data="$(tail -n +$(<$offset_file) $state_file | grep '^[0-9]')"

if [ -z "$data" ]; then
  crit_quit "Couldn't import the input data!"
fi
declare -a mountpoints
declare -a timestamps
declare -A availability
while read timestamp device mountpoint available; do
  [[ ${mountpoints[*]} =~ "$mountpoint " || $mountpoint =~ ^/run/runc/ ]] || mountpoints[${#mountpoints[*]}]=$mountpoint
  [[ ${timestamps[*]} =~ $timestamp ]] || timestamps[${#timestamps[*]}]=$timestamp
  availability["$mountpoint:$timestamp"]=$available
done <<< "$data"

for mountpoint in "${mountpoints[@]}"; do
  debug "Processing $mountpoint"

  lowestbyterate=
  oldtimestamp=${timestamps[0]}
  for timestamp in "${timestamps[@]:1}"; do
    delta_seconds=$((timestamp - oldtimestamp))
    # Avoid divide by zero bugs and other strangeness.
    [[ $delta_seconds -lt 1 ]] && continue
    delta_kilobytes=$((${availability["$mountpoint:$oldtimestamp"]} - ${availability["$mountpoint:$timestamp"]}))
    byterate=$((delta_kilobytes * 1024 / delta_seconds))
    # Ignore anomalies where the amount of free disk space increased...
    [ $byterate -lt 1 ] && {
      lowestbyterate=1
      break;
    }
    lowestbyterate=${lowestbyterate:=$byterate}
    [[ $byterate -lt $lowestbyterate ]] && lowestbyterate=$byterate
    oldtimestamp=$timestamp
  done
  if [ $lowestbyterate == 1 ]; then
    messages="${messages}${mountpoint} not filling up. "
  else
    bytestogo=$((${availability["$mountpoint:$timestamp"]} * 1024))
    secondstogo=$((bytestogo / lowestbyterate))
    if [ $secondstogo -lt $critical_seconds ]; then
      criticalmessages="${criticalmessages}${mountpoint} full within $((secondstogo/3600)) hours. "
    elif [ $secondstogo -lt $warning_seconds ]; then
      warningmessages="${warningmessages}${mountpoint} good for only $((secondstogo/3600)) hours. "
    else
      if [ $((secondstogo/86400)) -gt 30 ]; then
        messages="${messages}${mountpoint} not filling up. "
      else
        messages="${messages}${mountpoint} good for $((secondstogo/86400)) days. "
      fi
    fi
  fi
done

echo "${criticalmessages}${warningmessages}${messages}"
if [ -n "$criticalmessages" ]; then
  exit 2
fi
if [ -n "$warningmessages" ]; then
  exit 1
fi
if [ -n "$messages" ]; then
  exit 0
fi
crit_quit "Unknown error"